function generateTGA(fileName){	var success 			= false;	var targaFile;	try	{		targaFile	 		= pr_saveTGA(fileName);		if(targaFile != false)			success			= true;	}	catch(e)	{		alert("SAVE Error:" + e.message);	}		var generatedFile	= targaFile.fsName.replace(/\\/g, '\\\\');	var xml 	= '<object>';	xml 		+= '<property id="success"><string>'+success+'</string></property>';	xml 		+= '<property id="generatedFile"><string>'+generatedFile+'</string></property>';	xml 		+= '</object>';	return xml;}/*function generateAndUploadTGAOnCasparFTP(ftphost, ftplogin, ftppass, fileName, pathOnFTP){	var success = false;	try	{		var localTargaFile = pr_saveTGA(fileName);		if(localTargaFile != false)		{						orgPath 	= localTargaFile.fsName;			//alert(ftphost + " :: " + ftplogin + " :: " + ftppass + " :: " + orgPath + " :: " + pathOnServer + " :: " + localTargaFile.name + " :: " + appPath);			success = uploadToCasparFTP(ftphost, ftplogin, ftppass, orgPath, pathOnFTP, localTargaFile.name);		}	}	catch(e)	{		alert("SAVE Error:" + e.message);	}		var xml 	= '<object>';	xml 		+= '<property id="success"><string>'+success+'</string></property>';	xml 		+= '<property id="generatedFile"><string>'+orgPath+'</string></property>';	xml 		+= '<property id="generatedFileName"><string>'+localTargaFile.name+'</string></property>';	xml 		+= '</object>';	return xml;}*/function uploadFileToFTP(filePath, ftphost, ftplogin, ftppass, pathOnFTP){	var success = false;	try	{		var file = new File(filePath);		success = pr_uploadToFTP(ftphost, ftplogin, ftppass, filePath, pathOnFTP, file.name);	}	catch(e)	{		alert("UPLOAD Error:" + e.message);	}	var xml 	= '<object>';	xml 		+= '<property id="success"><string>'+success+'</string></property>';	xml 		+= '<property id="generatedFile"><string>'+filePath+'</string></property>';	xml 		+= '</object>';	return xml;}function pr_uploadToFTP(ftphost, ftplogin, ftppass, filePath, pathOnFTP, fileName){	var success 		= false;	var appPath = app.path + "/Plug-ins/Panels/CasparTargaGenerator";	var includeScripts 	= [appPath + "/FTPConnection.jsx"];	pathOnFTP 			= pathOnFTP.replace(/\/\//g, '/');		for (var i = 0; i < includeScripts.length; i++) {		var scriptFile = new File(includeScripts[i]);				if (scriptFile.open()) {			eval(scriptFile.read());			scriptFile.close();		}		else {			readyState = false;			alert("ERROR: Unable to open included file: " + includeScripts[i] + "");		}	}		var ftp = new FTPConnection(false);	var gotFTPError = false;		try	{		ftp.setEncodingBinary();			if (!ftp.open(ftphost, "21", ftplogin, ftppass))			{				alert("ERROR: couldn't open ftp conn. " + ":\n\n" + ftp.error);			}									var fileToUpload = new File(filePath);			//alert("file: " + fileToUpload.exists + ". :: path on FTP: " + pathOnFTP);						if (!ftp.put(fileToUpload, "/" + pathOnFTP + "/" + fileName))			{				alert(ftp.error + " host: " + ftphost);			}				}	catch (e) {		alert("FTP ERROR: " + e.toString() + "\n" + ftp.error);		gotFTPError  = true;	}	finally {		if(!gotFTPError)		{			success = true;			ftp.close();		}	}	return success;}function pr_saveTGA(fileName){	try	{		if (app.documents.length <= 0)		{			alert("Error: There is no document open");			return;		}				var extension 					= ".tga";    		var orgPath						= app.activeDocument.path.fsName + "";				if(fileName == "")		{			fileName 					= app.activeDocument.name.replace(/\.[^\.]+$/, '');		}		var localTargaFile 				= new File( orgPath + "/" + fileName + extension );				//try		//{			//if(duplicatedDoc.backgroundLayer != null)			//{				//if( app.activeDocument.layers.length == 1)				//{					//noPixelsOnLayer = true;					//throw "ONLY BGLayer. No layers or no pixels in layers.";				//}			//}		//}		//catch(e)		//{			///*if( app.activeDocument.layers.length == 1)			//{				//noPixelsOnLayer = true;				//throw "No layers or no pixels in layers.";			//}*/		//}				var duplicatedDoc 				= app.activeDocument.duplicate();		var noPixelsOnLayer				= false;		try		{			if(duplicatedDoc.backgroundLayer != null)			{				app.activeDocument.artLayers.add();				app.activeDocument.backgroundLayer.remove();				if( app.activeDocument.layers.length == 1)					noPixelsOnLayer = true;			}		}		catch(e)		{					}				if( app.activeDocument.layers.length == 0)			noPixelsOnLayer = true;				if(noPixelsOnLayer)		{			duplicatedDoc.close(SaveOptions.DONOTSAVECHANGES);			throw "No layers or no pixels in layers.";		}						var appPath = app.path + "/Plug-ins/Panels/CasparTargaGenerator";		var actionFile = new File(appPath + "/TargaGenerator.atn");		var rex = new RegExp (decodeURI(actionFile.name.replace(/\.[^\.]+$/, '')), "g");				if(actionFile.exists)		{			var actionList = getActionSets();						for(var d in actionList)			{				if(decodeURI(actionList[d]).match(rex))				{					unLoadAction(actionList[d]);				}			}						app.load(actionFile);			var actionList =getActionSets();			var flag = false;			for(var d in actionList)			{				if(decodeURI(actionList[d]).match(rex))					flag=true;			}		}		else		{			duplicatedDoc.close(SaveOptions.DONOTSAVECHANGES);			alert("Error: Action MakeTarga is missing!");			return false;		}				app.doAction("MakeTarga", "TargaGenerator");				resizeForSDImage();				targaSaveOptions 				= new TargaSaveOptions();		targaSaveOptions.resolution 	= TargaBitsPerPixels.THIRTYTWO;		targaSaveOptions.alphaChannels 	= true;		TargaSaveOptions.rleCompression	= true;				app.activeDocument.saveAs(localTargaFile, targaSaveOptions, true, Extension.LOWERCASE);		app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);	}	catch(e)	{		try		{			duplicatedDoc.close(SaveOptions.DONOTSAVECHANGES);		}		catch(e)		{			//		}				if(e.message)			alert("Error: " + e.message);		else			alert("Error: " + e.toString());				return false;	}	return localTargaFile;}function resizeForSDImage(){	//SD widths: 720, 768, 1024, 1050 => 720	if (app.activeDocument.width.as('px') == UnitValue(768, "px") || app.activeDocument.width.as('px') == UnitValue(1024, "px") || app.activeDocument.width.as('px') == UnitValue(1050, "px"))		app.activeDocument.resizeImage(UnitValue(720, "px"), null, null, ResampleMethod.BICUBIC);	}/*function generateAndCopyTGA(fileName, coypPath){	//alert("COPY!!: " + fileName + " :: " + coypPath);	var success = false;	try	{		var localTargaFile = pr_saveTGA(fileName);		if(localTargaFile != false)		{			success = pr_copyFile(localTargaFile, coypPath);		}	}	catch(e)	{		alert("Copy error:" + e.message);	}		var xml 	= '<object>';	xml 		+= '<property id="success"><string>'+success+'</string></property>';	xml 		+= '<property id="generatedFile"><string>'+file.fsName+'</string></property>';	xml 		+= '<property id="generatedFileName"><string>'+file.name+'</string></property>';	xml 		+= '</object>';	return xml;}*/function copyFile(file, coypPath){	var success = false;	try	{		var localFile = new File(file);		if(localFile.exists)		{			success = pr_copyFile(localFile, coypPath);		}		else		{			alert("COPY FILE Error: file: " + file + " was not found");		}			}	catch(e)	{		alert("Copy error:" + e.message);	}		var xml 	= '<object>';	xml 		+= '<property id="success"><string>'+success+'</string></property>';	xml 		+= '<property id="generatedFile"><string>'+file+'</string></property>';	xml 		+= '</object>';	return xml;}function pr_copyFile(file, newPath){	var success = false;	try	{				if(file.lineFeed.toLowerCase() == "windows" )	//win		{			if(newPath.indexOf(":/") != -1) //local			{				if(newPath.lastIndexOf("/") != newPath.length-1 )					newPath = newPath + "/";			}			else if (newPath.indexOf(":\\") != -1) // local			{				if(newPath.lastIndexOf("\\") != newPath.length-1 )					newPath = newPath + "\\";			}			else			{				newPath = "\\\\" + newPath;								if(newPath.lastIndexOf("\\") != newPath.length-1 )					newPath = newPath + "\\";			}					}		else //mac / unix		{			if(newPath.indexOf("/") != 0 )				newPath = "/" + newPath;						if(newPath.lastIndexOf("/") != newPath.length-1 )				newPath = newPath + "/";					}				newPath += file.name;		//newPath = newPath.replace(/\/\//g, '/');		//alert(file.lineFeed + " new path: " + newPath);		success = file.copy(newPath);	}	catch(e)	{		alert("Error: Could not copy file " + file.fullName + " to: " + newPath);		success = false;	}		return success;}function saveFile(content, path){		//alert("content: " + content);	var success = "false";		try	{		var file = new File(path);		if(file.exists)		{			file.remove();		}				file.open("w");		file.writeln("" + content);		file.close();		success = "true";	}	catch(e)	{		alert("Could not save file: " + path + ". Error: " + e.toString());	}		return getReturnableValue("response" , success);}function loadFile(path){	var file = new File(path);	var content = "";	try	{		if(file.exists)		{						file.open("r");			content = file.read();			file.close();		}					}	catch(e)	{		alert("Could not load file: " + path + ". Error: " + e.toString());	}		return getReturnableValue("response" , content);}function createFolder(path, folder){	try 	{		var folder = new Folder(path + "/" + folder);		if(!folder.exists)		{						folder.create();		}	}	catch(e)	{		alert("Could not create folder: " + path + ". Error: " + e.toString());	}	}function saveTGAOLD(fileName, path){	if (app.documents.length <= 0) 		return;		//var name					= app.activeDocument.name.replace(/\.[^\.]+$/, '');	var orgPath				=	app.activeDocument.path;	var filePath			= path + fileName + ".tga"; //orgPath + "/" + fileName + ".tga";		var targaFile = new File( filePath );				app.doAction("MakeTarga", "TargaGenerator");		targaSaveOptions 						= new TargaSaveOptions();	targaSaveOptions.resolution 		= TargaBitsPerPixels.THIRTYTWO;	targaSaveOptions.alphaChannels 	= true;	TargaSaveOptions.rleCompression	= true;		app.activeDocument.saveAs(targaFile, targaSaveOptions, true, Extension.LOWERCASE);	app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);}function getActionSets() { cTID = function(s) { return app.charIDToTypeID(s); };   var i = 1;   var sets = [];    while (true) {     var ref = new ActionReference();     ref.putIndex(cTID("ASet"), i);     var desc;     var lvl = $.level;     $.level = 0;     try {       desc = executeActionGet(ref);     } catch (e) {       break;    } finally {       $.level = lvl;     }     if (desc.hasKey(cTID("Nm  "))) {       var set = {};       set.index = i;       set.name = desc.getString(cTID("Nm  "));       set.toString = function() { return this.name; };       set.count = desc.getInteger(cTID("NmbC"));       set.actions = [];       for (var j = 1; j <= set.count; j++) {         var ref = new ActionReference();         ref.putIndex(cTID('Actn'), j);         ref.putIndex(cTID('ASet'), set.index);         var adesc = executeActionGet(ref);         var actName = adesc.getString(cTID('Nm  '));         set.actions.push(actName);       }       sets.push(set);     }     i++;   }   return sets; }; function unLoadAction(aSet){var desc = new ActionDescriptor(); var ref = new ActionReference(); ref.putName( charIDToTypeID( "ASet" ), decodeURI(aSet)); desc.putReference( charIDToTypeID( "null" ), ref ); executeAction( charIDToTypeID( "Dlt " ), desc, DialogModes.NO );};function getFileName(){	var name 	= app.activeDocument.name.replace(/\.[^\.]+$/, '');		var xml 	= '<object>';	xml 		+= '<property id="fileName"><string>'+name+'</string></property>';	xml 		+= '</object>';		return xml; }function getPSDocumentParams(){	var name 	= app.activeDocument.name.replace(/\.[^\.]+$/, '');	var path	= app.activeDocument.path.fsName.replace(/\.[^\.]+$/, '');	var xml 	= '<object>';	xml 		+= '<property id="documentPath"><string>'+path+'</string></property>';	xml 		+= '<property id="fileName"><string>'+name+'</string></property>';	xml 		+= '</object>';		return xml;}function fileExists(path){		var exists = "false";	try	{		var file = new File(path);		if(file.exists)		{			exists = "true";		}					}	catch(e)	{		alert("Error: " + e.toString());	}		return getReturnableValue("response" , exists);}function getReturnableValue(id, value){	var xml 	= '<object>';	xml 		+= '<property id="' + id + '"><string>' + value + '</string></property>';	xml 		+= '</object>';		return xml; }